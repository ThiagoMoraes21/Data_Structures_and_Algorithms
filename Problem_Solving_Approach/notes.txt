## UNDESTANDING THE PROBLEM

1. Can I restate the problem in my own words?

2. What are the inputs that go into the problem?

3. What are the outputs that should come from the solution to the problem?

4. Can the outputs be determined from the inputs? In other words, do I have
   enough information to solve the problem? (You may not be able to answer this 
   question until you set about solving the problem. That's okay; it's still worth 
   considering the question at this early stage).

5. How should I label the important pieces of data that are a part of the problem?



## EXPLORE CONCRETE EXAMPLES

1. Start with Simple Examples

2. Progress to More Complex Examples

3. Edge Cases - Explore Examples with Empty Inputs

4. Edge Cases - Explore Examples with Invalid Inputs



## BREAK IT DOWN

1. Explicitly write out the steps you need to take



## SOLVE/SIMPLIFY

1. Simplify: 
        - Find the core difficulty in what you're trying to do
        - Temporarily ignore that difficulty
        - Write a simplified solution
        - Then incorporate that difficulty back in



## LOOK BACK AND REFACTOR

1. Refactoring Questions: 
        - Can you check the result ?
        - Can you derive the result differently ?
        - Can you undestand it at a glance (quick look) ?
        - Can you user the result or method for some other problem ?
        - Can you improve the performance of your solution ?
        - Can you think of other ways to refactor ?
        - How have other people solved this problem ?